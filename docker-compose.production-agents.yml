version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./LokiAi
      dockerfile: Dockerfile.frontend.prod
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:5000
      - VITE_SOCKET_URL=http://localhost:5050
    depends_on:
      - backend
    networks:
      - lokiai-network

  # Backend Service (Production Agents)
  backend:
    build:
      context: ./LokiAi
      dockerfile: Dockerfile.backend
    ports:
      - "5000:5000"
      - "5050:5050"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - SOCKET_PORT=5050
      - MONGODB_URI=mongodb://admin:lokiai2024@mongodb:27017/loki_agents?authSource=admin
      - CORS_ORIGIN=http://localhost:80,http://localhost:5175
      - BIOMETRICS_URL=http://biometrics:25000
      - REBALANCER_API_URL=http://rebalancer-api:5000
    depends_on:
      - mongodb
      - biometrics
      - rebalancer-api
    volumes:
      - ./LokiAi/logs:/app/logs
    networks:
      - lokiai-network

  # Portfolio Rebalancer (Python Service)
  portfolio-rebalancer:
    build:
      context: ./portfolio_rebalancer
      dockerfile: Dockerfile
    environment:
      - MONGO_URI=mongodb://admin:lokiai2024@mongodb:27017/loki_agents?authSource=admin
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - EMAIL_TO=${EMAIL_TO}
    depends_on:
      - mongodb
      - redis
    networks:
      - lokiai-network

  # Rebalancer API (Flask Service)
  rebalancer-api:
    build:
      context: ./Rebalancer
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    environment:
      - FLASK_ENV=production
      - PORT=5000
      - MONGO_URI=mongodb://admin:lokiai2024@mongodb:27017/loki_agents?authSource=admin
      - MONGO_DB_NAME=loki_agents
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - ALCHEMY_API_KEY=${ALCHEMY_API_KEY}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY}
    depends_on:
      - mongodb
    networks:
      - lokiai-network

  # Biometrics Service
  biometrics:
    build:
      context: ./LokiAi/biometrics
      dockerfile: Dockerfile
    ports:
      - "25000:25000"
    environment:
      - FLASK_ENV=production
      - ENCRYPTION_KEY=loki-biometric-key-2025
      - MONGODB_URI=mongodb://admin:lokiai2024@mongodb:27017/loki_agents?authSource=admin
    depends_on:
      - mongodb
    volumes:
      - ./LokiAi/biometrics/models:/app/models
    networks:
      - lokiai-network

  # MongoDB Database
  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=lokiai2024
      - MONGO_INITDB_DATABASE=loki_agents
    volumes:
      - mongodb_data:/data/db
      - ./LokiAi/mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js:ro
    networks:
      - lokiai-network

  # Redis (for Celery)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lokiai-network

  # Celery Worker (for Portfolio Rebalancer)
  celery-worker:
    build:
      context: ./portfolio_rebalancer
      dockerfile: Dockerfile
    command: celery -A celery_app worker --loglevel=info --concurrency=2
    environment:
      - MONGO_URI=mongodb://admin:lokiai2024@mongodb:27017/loki_agents?authSource=admin
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      - mongodb
      - redis
    networks:
      - lokiai-network

  # Task Gateway (FastAPI)
  task-gateway:
    build:
      context: ./task_gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      - redis
    networks:
      - lokiai-network

volumes:
  mongodb_data:
  redis_data:

networks:
  lokiai-network:
    driver: bridge